# stack: 4, 1, 0x20 
transferFrom:
    jumpdest

    push1 4 + 2 * 32                # 68, 4, 1, 0x20 
    calldataload                    # amount, 4, 1, 0x20
    push1 36
    calldataload                    # to, amount, 4, 1, 0x20
    dup3                            # 4, to, amount, 4, 1, 0x20
    calldataload                    # from, to, amount, 4, 1, 0x20

    caller                          # msg.sender, from, to, amount, 4, 1, 0x20
    dup2                            # from, msg.sender, from, to, amount, 4, 1, 0x20

    returndatasize                  # 0, from, msg.sender, from, to, amount, 4, 1, 0x20
    mstore                          # msg.sender, from, to, amount, 4, 1, 0x20 | memory: 000...from

    msize                           # 0x20, msg.sender, from, to, amount, 4, 1, 0x20 | memory: 000...from
    mstore                          # from, to, amount, 4, 1, 0x20 | memory: 000...from 000...caller

    %allowance_slot()               # a.sid, from, to, amount, 4, 1, 0x20

    dup1                            # a.sid, a.sid, from, to, amount, 4, 1, 0x20
    sload                           # allowance, a.sid, from, to, amount, 4, 1, 0x20

    dup1                            # allowance, allowance, a.sid, from, to, amount, 4, 1, 0x20
    dup6                            # amount, allowance, allowance, a.sid, from, to, amount, 4, 1, 0x20
    gt
    %push(error)
    jumpi                           # allowance, a.sid, from, to, amount, 4, 1, 0x20

    dup5                            # amount, allowance, a.sid, from, to, amount, 4, 1, 0x20
    swap1                           # allowance, amount, a.sid, from, to, amount, 4, 1, 0x20
    sub                             # allowance - amount, a.sid, from, to, amount, 4, 1, 0x20

    swap1                           # a.sid, allowance - amount, from, to, amount, 4, 1, 0x20
    sstore                          # from, to, amount, 4, 1, 0x20

    %push(transferInternal)
    jump

