# stack: 4, 1, 0x20 
transfer:                                       # stack after opcode is executed
    jumpdest

    push1 36
    calldataload                                # amount, 4, 1, 0x20 
    dup2                                        # 4, amount, 4, 1, 0x20 
    calldataload                                # to, amount, 4, 1, 0x20 

    caller
    %push(transferInternal)
    jump

# stack: from, to, amount, 4, 1, 0x20
transferInternal:
    jumpdest

                                                # f.sid, to, amount, 4, 1, 0x20 | f.sid = from
    dup3                                        # amount, f.sid, to, amount, 4, 1, 0x20 | f.sid = from
    dup2                                        # f.sid, amount, f.sid, to, amount, 4, 1, 0x20 
    sload                                       # balanceOf[from], amount, f.sid, to, amount, 4, 1, 0x20 
    dup2                                        # amount, balanceOf[from], amount, f.sid, to, amount, 4, 1, 0x20 
    dup2                                        # balanceOf[from], amount, balanceOf[from], amount, f.sid, to, amount, 4, 1, 0x20

    lt
    %push(error)
    jumpi                                       # balanceOf[from], amount, f.sid, to, amount, 4, 1, 0x20

    sub                                         # balanceOf[from] - amount, f.sid, to, amount, 4, 1, 0x20
    dup2                                        # f.sid, balanceOf[from] - amount, f.sid, to, amount, 4, 1, 0x20
    sstore                                      # f.sid, to, amount, 4, 1, 0x20

    dup2                                        # to.sid, f.sid, to, amount, 4, 1, 0x20 | to.sid = to = balance of to storage slot
    dup1                                        # to.sid, to.sid, f.sid, to, amount, 4, 1, 0x20
    sload                                       # balanceOf[to], to.sid, f.sid, to, amount, 4, 1, 0x20

    dup5                                        # amount, balanceOf[to], to.sid, f.sid, to, amount, 4, 1, 0x20
    add                                         # amount + balanceOf[to], to.sid, f.sid, to, amount, 4, 1, 0x20

    swap1                                       # to.sid, amount + balanceOf[to], f.sid, to, amount, 4, 1, 0x20
    sstore                                      # f.sid, to, amount, 4, 1, 0x20

    swap2                                       # amount, to, f.sid, 4, 1, 0x20
    returndatasize                              # 0, amount, to, f.sid, 4, 1, 0x20
    mstore                                      # to, f.sid, 4, 1, 0x20 | memory: 000...amount

    swap1                                       # f.sid, to, 4, 1, 0x20 | memory: 000...amount

    dup4                                        # 1, f.sid, to, 4, 1, 0x20 | memory: 000...amount
    sload                                       # s[1], f.sid, to, 4, 1, 0x20 | memory: 000...amount
    dup6                                        # 0x20, s[1], f.sid, to, 4, 1, 0x20 | memory: 000...amount
    returndatasize                              # 0, 0x20, s[1], f.sid, to, 4, 1, 0x20 | memory: 000...amount
    log3                                        # 4, 1, 0x20 | memory: 000...amount

    dup2                                        # 1, 4, 1, 0x20 | memory: 000...amount
    %push(returnValue)
    jump

